"""
–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø–æ 16 –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º.
"""
import json
from pathlib import Path
from typing import Dict, Tuple

__version__ = "1.0.0"

CONFIG_DIR = Path(__file__).parent.parent / "config"
with open(CONFIG_DIR / "indicators.json", "r", encoding="utf-8") as f:
    INDICATORS_CONFIG = json.load(f)

TIMEFRAMES = INDICATORS_CONFIG["timeframes"]


def analyze_ticker(symbol: str) -> Dict[str, Tuple[int, int, str]]:
    """
    –ê–Ω–∞–ª–∏–∑ —Ç–∏–∫–µ—Ä–∞.

    Args:
        symbol: –¢–∏–∫–µ—Ä.

    Returns:
        {—Ç–∞–π–º—Ñ—Ä–µ–π–º: (BUY, SELL, —Å–∏–≥–Ω–∞–ª)}
    """
    patterns = {
        "SBER": {"trend": "up", "volatility": "medium"},
        "YNDX": {"trend": "up", "volatility": "high"},
        "GAZP": {"trend": "down", "volatility": "low"},
        "TATN": {"trend": "up", "volatility": "low"},
    }
    pattern = patterns.get(symbol, {"trend": "neutral"})

    result = {}
    for tf in TIMEFRAMES:
        if pattern["trend"] == "up":
            buy, sell = (14, 2) if tf == "4h" else (9, 7)
            signal = "üü¢ –°–ò–õ–¨–ù–´–ô –ö–û–ù–°–ï–ù–°–£–°: –ü–û–ö–£–ü–ö–ò" if tf == "4h" else "üü¢ –†–∞—Å—Ç—ë—Ç, –Ω–æ —Å –∫–æ—Ä—Ä–µ–∫—Ü–∏–µ–π"
        elif pattern["trend"] == "down":
            buy, sell = 5, 11
            signal = "üî¥ –ü–†–û–î–ê–ñ–ò –¥–æ–º–∏–Ω–∏—Ä—É—é—Ç"
        else:
            buy, sell = 8, 8
            signal = "‚ö™Ô∏è –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ / –®—É–º"
        result[tf] = (buy, sell, signal)
    return result
