"""
–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤ –ø–æ –∫–æ–Ω—Å–µ–Ω—Å—É—Å—É.
"""
from typing import Dict
import logging

__version__ = "1.0.0"


def generate_signal(analysis: Dict[str, Dict], prices: Dict[str, float]) -> str:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¢–ó.
    """
    logger = logging.getLogger("MOEXbot")
    output = []

    output.append(f"\n{'='*60}")
    output.append("          –°–¢–û–ò–ú–û–°–¢–¨ –ê–ö–¢–ò–í–û–í")
    output.append("")
    for s, p in prices.items():
        output.append(f"{s}: {p:,.2f} —Ä—É–±.")
    output.append("")
    output.append("="*60)

    output.append("     –ü–û–ö–ê–ó–ê–ù–ò–Ø –ò–ù–î–ò–ö–ê–¢–û–†–û–í –ò –ò–• –ê–ù–ê–õ–ò–ó")
    output.append("")

    has_signal = False
    for i, (s, data) in enumerate(analysis.items(), 1):
        output.append(f"üìä –¢–û–ü-{i}: {s}")
        for tf, (b, s_val, sig) in data.items():
            output.append(f"  ‚Ä¢ {tf}: {b}/16 BUY, {s_val}/16 SELL ‚Üí {sig}")
        output.append("  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
        output.append(f"  {sig}")
        output.append("")

        if not has_signal and all(b >= 13 for b, _, _ in data.values()):
            entry = prices[s]
            sl = round(entry * 0.98, 2)
            tp = round(entry * 1.05, 2)
            output.append("="*60)
            output.append("   –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ù–ê–ô–î–ï–ù–ù–û–ú –°–ò–ì–ù–ê–õ–ï")
            output.append("")
            output.append(f"‚úÖ –°–ò–ì–ù–ê–õ –ü–û–ö–£–ü–ö–ò: {s}")
            output.append(f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {entry:,.2f} —Ä—É–±.")
            output.append(f"–°—Ç–æ–ø-–ª–æ—Å—Å: {sl:,.2f} —Ä—É–±.")
            output.append(f"–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: {tp:,.2f} —Ä—É–±.")
            output.append("="*60)
            has_signal = True

    if not has_signal:
        output.append("="*60)
        output.append("   –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ù–ê–ô–î–ï–ù–ù–û–ú –°–ò–ì–ù–ê–õ–ï")
        output.append("")
        output.append("‚ùå –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é ‚â•13/16 –Ω–∞ –≤—Å–µ—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞—Ö.")
        output.append("="*60)

    result = "\n".join(output)
    logger.info("–°–∏–≥–Ω–∞–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω.")
    return result
