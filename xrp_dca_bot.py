#!/usr/bin/env python3"""XRP DCA Signal Bot
–õ–æ–∫–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —É—Ä–æ–≤–Ω–µ–π —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ XRP
"""

import requests
import json
import datetime
from typing import Dict, List, Tuple

class XRPDcaBot:
    def __init__(self):
        self.coin_id = "ripple"
        self.currency = "usd"
        self.api_url = f"https://api.coingecko.com/api/v3/simple/price"
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ DCA
        self.dca_levels = [
            {"drop": -0.05, "allocation": 0.10},   # -5%  ‚Üí 10% –±—é–¥–∂–µ—Ç–∞
            {"drop": -0.10, "allocation": 0.20},   # -10% ‚Üí 20% –±—é–¥–∂–µ—Ç–∞
            {"drop": -0.15, "allocation": 0.30},   # -15% ‚Üí 30% –±—é–¥–∂–µ—Ç–∞
            {"drop": -0.25, "allocation": 0.25},   # -25% ‚Üí 25% –±—é–¥–∂–µ—Ç–∞
            {"drop": -0.35, "allocation": 0.15},   # -35% ‚Üí 15% –±—é–¥–∂–µ—Ç–∞
        ]
        
    def get_current_price(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã XRP"""
        try:
            response = requests.get(
                self.api_url,
                params={"ids": self.coin_id, "vs_currencies": self.currency},
                timeout=10
            )
            response.raise_for_status()
            data = response.json()
            return data["ripple"]["usd"]
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã: {e}")
            return None
    
    def calculate_dca_levels(self, entry_price: float, total_budget: float) -> List[Dict]:
        """–†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω–µ–π DCA –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ö–æ–¥–Ω–æ–π —Ü–µ–Ω—ã"""
        levels = []
        
        for level in self.dca_levels:
            drop_price = entry_price * (1 + level["drop"])
            allocation_amount = total_budget * level["allocation"]
            coins_to_buy = allocation_amount / drop_price
            
            levels.append({
                "drop_percentage": level["drop"] * 100,
                "target_price": round(drop_price, 4),
                "allocation_usd": round(allocation_amount, 2),
                "coins_to_buy": round(coins_to_buy, 2),
                "total_invested": 0,
                "avg_price": 0
            })
        
        return levels
    
    def calculate_portfolio_metrics(self, levels: List[Dict], entry_price: float) -> Dict:
        """–†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        total_invested = 0
        total_coins = 0
        
        # –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ (20% –±—é–¥–∂–µ—Ç–∞)
        initial_investment = 0.2 * sum(level["allocation_usd"] for level in levels) / 0.8
        initial_coins = initial_investment / entry_price
        
        total_invested += initial_investment
        total_coins += initial_coins
        
        # –£—á–µ—Ç DCA –ø–æ–∫—É–ø–æ–∫
        for level in levels:
            total_invested += level["allocation_usd"]
            total_coins += level["coins_to_buy"]
            level["total_invested"] = round(total_invested, 2)
            level["avg_price"] = round(total_invested / total_coins, 4)
        
        return {
            "total_investment": round(total_invested, 2),
            "total_coins": round(total_coins, 2),
            "average_price": round(total_invested / total_coins, 4),
            "break_even_price": round(total_invested / total_coins, 4)
        }
    
    def generate_signal_report(self, entry_price: float, total_budget: float) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏ –¥–ª—è DCA"""
        current_price = self.get_current_price()
        if not current_price:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É XRP"
        
        levels = self.calculate_dca_levels(entry_price, total_budget)
        metrics = self.calculate_portfolio_metrics(levels, entry_price)
        
        report = f"""
XRP DCA –°–¢–†–ê–¢–ï–ì–ò–Ø –£–°–†–ï–î–ù–ï–ù–ò–Ø
============================

–¢–ï–ö–£–©–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø:
   –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ XRP: ${current_price:.4f}
   –í–∞—à–∞ –≤—Ö–æ–¥–Ω–∞—è —Ü–µ–Ω–∞: ${entry_price:.4f}
   –¢–µ–∫—É—â–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {((current_price - entry_price) / entry_price * 100):.2f}%

–°–¢–†–ê–¢–ï–ì–ò–Ø DCA (–ë—é–¥–∂–µ—Ç: ${total_budget:.2f}):

–£–†–û–í–ù–ò –î–û–ö–£–ü–ö–ò:
"""
        
        for i, level in enumerate(levels, 1):
            status = "üî¥ –ê–ö–¢–ò–í–ï–ù" if current_price <= level["target_price"] else "‚ö™ –û–ñ–ò–î–ê–ù–ò–ï"
            report += f"""
{i}. {status}
   –¶–µ–Ω–∞ –¥–æ–∫—É–ø–∫–∏: ${level['target_price']:.4f} 
   –ü—Ä–æ—Å–∞–¥–∫–∞: {level['drop_percentage']:.1f}%
   –°—É–º–º–∞: ${level['allocation_usd']:.2f}
   –ö–æ–ª-–≤–æ XRP: {level['coins_to_buy']:.2f}
   –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø–æ—Å–ª–µ: ${level['avg_price']:.4f}
"""
        
        report += f"""
–ò–¢–û–ì–û–í–´–ï –ú–ï–¢–†–ò–ö–ò:
   –û–±—â–∞—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è: ${metrics['total_investment']:.2f}
   –í—Å–µ–≥–æ XRP: {metrics['total_coins']:.2f}
   –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏–∏: ${metrics['average_price']:.4f}
   –¶–µ–Ω–∞ –±–µ–∑—É–±—ã—Ç–∫–∞: ${metrics['break_even_price']:.4f}

–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 20% –±—é–¥–∂–µ—Ç–∞ –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–π –ø–æ–∫—É–ø–∫–∏ –ø–æ ${entry_price:.4f}
   ‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ —É—Ä–æ–≤–Ω—è–º–∏ –ø—Ä–æ—Å–∞–¥–∫–∏ –¥–ª—è –¥–æ–∫—É–ø–æ–∫
   ‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å—Ç–æ–ø-–ª–æ—Å—Å –Ω–∏–∂–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è (${levels[-1]['target_price'] * 0.95:.4f})
   ‚Ä¢ –¶–µ–ª—å –ø—Ä–æ–¥–∞–∂–∏: 2x –æ—Ç —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã (${metrics['break_even_price'] * 2:.4f})

–î–ï–ô–°–¢–í–ò–Ø –°–ï–ì–û–î–ù–Ø:
"""
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
        active_levels = [l for l in levels if current_price <= l["target_price"]]
        if active_levels:
            for level in active_levels:
                report += f"   üî• –î–æ–∫—É–ø–∞–π—Ç–µ {level['coins_to_buy']:.2f} XRP –ø–æ ${level['target_price']:.4f}\n"
        else:
            closest_level = min(levels, key=lambda x: abs(x['target_price'] - current_price))
            drop_needed = ((closest_level['target_price'] - current_price) / current_price * 100)
            report += f"   ‚è≥ –î–æ–∂–¥–∏—Ç–µ—Å—å –ø—Ä–æ—Å–∞–¥–∫–∏ –Ω–∞ {drop_needed:.1f}% –¥–ª—è –¥–æ–∫—É–ø–∫–∏ –Ω–∞ —É—Ä–æ–≤–Ω–µ ${closest_level['target_price']:.4f}\n"
        
        return report

    def save_strategy_to_file(self, report: str, filename: str = "xrp_dca_strategy.txt"):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤ —Ñ–∞–π–ª"""
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(report)
        print(f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª: {filename}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    print("–ó–∞–ø—É—Å–∫ XRP DCA –ë–æ—Ç–∞...")
    
    bot = XRPDcaBot()
    
    # –í–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    try:
        entry_price = float(input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –≤—Ö–æ–¥–Ω—É—é —Ü–µ–Ω—É XRP: ") or "3.02")
        total_budget = float(input("–í–≤–µ–¥–∏—Ç–µ –æ–±—â–∏–π –±—é–¥–∂–µ—Ç –¥–ª—è DCA ($): ") or "1000")
    except ValueError:
        print("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        entry_price = 3.02
        total_budget = 1000
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    report = bot.generate_signal_report(entry_price, total_budget)
    print(report)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
    bot.save_strategy_to_file(report)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print("\n–î–õ–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –û–ë–ù–û–í–õ–ï–ù–ò–Ø:")
    print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python3 xrp_dca_bot.py")
    print("   –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç:")
    print("   */30 * * * * /usr/bin/python3 /path/to/xrp_dca_bot.py >> /path/to/dca_log.txt")

if __name__ == "__main__":
    main()
EOF


