#!/usr/bin/env python3
"""
Universal_DCA_Calculator
–û–¥–∏–Ω —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ª—é–±–æ–≥–æ —Ç–∏–∫–µ—Ä–∞.
"""

import requests
from typing import Optional, Tuple, List
from decimal import Decimal, getcontext

DRAWDOWNS: List[int] = [5, 10, 15, 20, 25]
ALLOCATION_PERCENT: List[int] = [20, 25, 30, 35, 40]
getcontext().prec = 18  # –≤—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –¥–ª—è Decimal


# ---------- helpers ----------
def search_coingecko_id(ticker: str) -> Optional[Tuple[str, str]]:
    url = "https://api.coingecko.com/api/v3/search"
    params = {"query": ticker}
    try:
        r = requests.get(url, params=params, timeout=10)
        r.raise_for_status()
        coins = r.json().get("coins", [])
        if not coins:
            return None
        needle = ticker.lower()
        for c in coins:
            if c["symbol"].lower() == needle:
                return c["id"], c["name"]
        return coins[0]["id"], coins[0]["name"]
    except Exception:
        return None


def get_price(coin_id: str) -> Optional[Decimal]:
    url = "https://api.coingecko.com/api/v3/simple/price"
    params = {"ids": coin_id, "vs_currencies": "usd"}
    try:
        r = requests.get(url, params=params, timeout=10)
        r.raise_for_status()
        price = r.json()[coin_id]["usd"]
        return Decimal(str(price))  # Decimal –∏–∑ —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –ø–æ—Ç–µ—Ä–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É: {e}")
        return None


def smart_format(val: Decimal) -> str:
    """–í—ã–≤–æ–¥–∏–º —Å—Ç–æ–ª—å–∫–æ –∑–Ω–∞–∫–æ–≤, —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ, –Ω–æ –Ω–µ –±–æ–ª–µ–µ 8."""
    s = format(val.normalize(), "f")
    if "." in s:
        int_part, frac_part = s.split(".")
        frac_part = frac_part.rstrip("0")[:8]
        return f"{int_part}.{frac_part}" if frac_part else int_part
    return s


# ---------- main ----------
def main() -> None:
    ticker = input("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, SOL, TON, PEPE): ").strip()
    res = search_coingecko_id(ticker)
    if not res:
        print(f"–¢–∏–∫–µ—Ä {ticker} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ CoinGecko.")
        return

    coin_id, coin_name = res
    price = get_price(coin_id)
    if price is None:
        return

    print("=" * 60)
    print(f"–†–∞—Å—á–µ—Ç —É—Ä–æ–≤–Ω–µ–π DCA –∑–∞–≤–µ—Ä—à–µ–Ω. –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${smart_format(price)}")
    print("=" * 60)
    print(f"üìä DCA –£–†–û–í–ù–ò –£–°–†–ï–î–ù–ï–ù–ò–Ø {ticker.upper()} ({coin_name})")
    print("=" * 60)
    print(f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${smart_format(price)}\n")

    for lvl, (dd, alloc) in enumerate(zip(DRAWDOWNS, ALLOCATION_PERCENT), start=1):
        buy_price = price * (Decimal(100 - dd) / Decimal(100))
        print(f"üî∫ –£–†–û–í–ï–ù–¨ {lvl}:")
        print(f"   üìâ –ü—Ä–æ—Å–∞–¥–∫–∞: {dd:.1f}%")
        print(f"   üíµ –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: ${smart_format(buy_price)}")
        print(f"   üí≥ –î–æ–∫—É–ø–∏—Ç—å: {alloc}% –æ—Ç {ticker.upper()}-–ø–æ—Ä—Ç—Ñ–µ–ª—è\n")

    print("=" * 60)


if __name__ == "__main__":
    main()
